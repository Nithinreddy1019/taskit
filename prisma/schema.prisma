// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]

  workspaces Workspace[]
  members    Members[]

  projects Projetcs[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Workspace {
  id         String  @id @default(cuid())
  name       String
  image      String?
  inviteCode String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  members  Members[]
  projects Projetcs[]
}

enum Role {
  ADMIN
  MEMBER
}

model Members {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  role Role @default(MEMBER)

  @@id(name: "memberId", [userId, workspaceId])
}

model Projetcs {
  id    String  @id @default(cuid())
  name  String
  image String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?

  createdBy String
  user      User   @relation(fields: [createdBy], references: [id])

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}
